#!/bin/bash
#
# druid-server
#
# chkconfig: 345 80 20
#
# description: druid-server
# processname: java
#
### BEGIN INIT INFO
# Provides:          druid-server
# Required-Start: $network $local_fs
# Required-Stop: 
# Should-Start: $named
# Should-Stop: 
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description: druid-server init script
# Description: druid-server init script
### END INIT INFO

. /etc/init.d/functions

DRUID_USER=druid
PID_FILE="/var/run/druid/druid-server.pid"
DRUID_HOME="/usr/lib/druid"
DRUID_CONF="/etc/druid/"
CLASSPATH="$DRUID_HOME/*:$DRUID_CONF"
LOG_DIR="/var/log/druid"

install -d -m 0755 /var/run/druid

. $DRUID_CONF/druid-env.sh

start() {
    PID=`cat "$PID_FILE" 2>/dev/null`
    if [ "$PID" != '' ]; then
        ps -fp $PID | grep $PID | grep druid  > /dev/null 2>&1
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
           echo "Druid server is not running ..."
        else
            echo "Druid server is running [$PID]"
            return 0
        fi
    fi
    
    DRUID_CMD="java $DRUID_HEAP_OPTS $DRUID_OPTS $DRUID_SPEC_OPTS -Duser.timezone=UTC -Dfile.encoding=UTF-8 -classpath $CLASSPATH io.druid.cli.Main server realtime"
    $DRUID_CMD > $LOG_DIR/druid-server.out 2>&1 & echo $! > $PID_FILE
    PID=`cat "$PID_FILE" 2>/dev/null`
    ps -fp $PID | grep $PID | grep druid  > /dev/null 2>&1
    return $?
}

stop() {
    echo "Stopping Druid server..."
    PID=`cat "$PID_FILE" 2>/dev/null`
    if [ "$PID" != '' ]; then
        ps -fp $PID | grep $PID | grep druid  > /dev/null 2>&1
        RETVAL=$?
        if [ $RETVAL -ne 1 ]; then
           kill $PID
        fi
    rm $PID_FILE
    fi
    return 0
}

status () {
    PID=`cat "$PID_FILE" 2>/dev/null`
    if [ "$PID" = '' ]; then
        return 1
    fi
    ps -fp $PID | grep $PID | grep druid  > /dev/null 2>&1
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "Druid server is not running ..."
    else
        echo "Druid server is running [$PID]"
    fi
    return $RETVAL
}

restart() {
    stop
    start
}

reload()  {
    restart
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status
        ;;
  restart)
        restart
        ;;
  reload)
        reload
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|restart}"
        exit 2
esac

exit $?
